#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var debug = require('debug')('e-commerce:server')
var http = require('http')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Initialize socket.io
 */

var { Server } = require('socket.io')

if (process.env.NODE_ENV === 'production') {
  var io = new Server(server)
}else if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'production-test') {
  var io = new Server(server, {
    cors: {
      origin: "http://localhost:3000",
      allowedHeaders: ["my-custom-header"],
      credentials: true
    }
  })
}

io.on('connection', (socket) => {
  console.log('a user connected')

  socket.on('new_order', ({order}) => {
    console.log('new order')
    io.emit('new_order', {order})
  })

  socket.on('order_update', ({order}) => {
    console.log('order update')
    io.emit('order_update', {order})
  })

  socket.on('message', ({sentBy, text}) => {
    console.log('new message')
    io.emit('message', {sentBy, text})
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
